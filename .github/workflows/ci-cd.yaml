name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install timesfm
        run: |
          git clone https://github.com/google-research/timesfm.git
          cd timesfm
          pip install -e .

      - name: Run tests
        run: |
          if [ -f tests/test.py ]; then python tests/test.py; fi

  docker-push:
    needs: build-test
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: api
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/demand-api:${{ env.IMAGE_TAG }}

      - name: Build and push Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: dashboard
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/demand-dashboard:${{ env.IMAGE_TAG }}

  deploy-gke:
    needs: docker-push
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set GKE plugin env
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Install gcloud CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli

      - name: Install gke-cloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Update API image in deployment
        run: |
          sed -i 's|<YOUR_API_IMAGE>|${{ env.DOCKERHUB_USERNAME }}/demand-api:${{ env.IMAGE_TAG }}|' k8s/api-deployment.yaml
      - name: Update Dashboard image in deployment
        run: |
          sed -i 's|<YOUR_DASHBOARD_IMAGE>|${{ env.DOCKERHUB_USERNAME }}/demand-dashboard:${{ env.IMAGE_TAG }}|' k8s/dashboard-deployment.yaml

      - name: Print updated images
        run: |
          UPDATED_API_IMAGE=$(sed -n 's|.*image: \(.*demand-api:.*\)|\1|p' k8s/api-deployment.yaml)
          UPDATED_DASHBOARD_IMAGE=$(sed -n 's|.*image: \(.*demand-dashboard:.*\)|\1|p' k8s/dashboard-deployment.yaml)
          echo "Updated API Image: $UPDATED_API_IMAGE"
          echo "Updated Dashboard Image: $UPDATED_DASHBOARD_IMAGE"

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/

      - name: Run integration tests
        run: |
          # Example: Wait for services to be ready and run integration tests
          kubectl rollout status deployment/api-deployment -n default
          kubectl rollout status deployment/dashboard-deployment -n default
          # Replace with your actual integration test command, e.g.:
          python tests/integration_test.py || echo "Integration tests not found or failed"
